from config import TOKEN, OWNERID, Stages, KEYS, CODES, NOSUPTYPES

import telebot
from telebot import types
from datetime import datetime, timezone, timedelta

# –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
import sqlite3 as sl
import time

# —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É
bot = telebot.TeleBot(TOKEN)

# –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã
start_txt = ('*–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç —ç–∫–æ-—Ñ–µ—Ä–º—ã ¬´–°–µ–ª–∫–æ–≤–æ¬ª.*\n\n–¢—É—Ç –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞—à–µ–≥–æ –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É [‚ô•](https://i.pinimg.com/originals/78/ff/48/78ff487a09f492514fc36a1bed5646f1.jpg)')
rules_txt = ('*–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã:*\n\n–∑–∞–¥–∞—ë–º –≤–∞–º —Ç—Ä–∏ –≤–æ–ø—Ä–æ—Å–∞ –∏ –¥–∞—Ä–∏–º –ø—Ä–æ–º–æ–∫–æ–¥. –ë–æ–ª—å—à–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ ‚Äî –±–æ–ª—å—à–µ —Å–∫–∏–¥–∫–∞!\n\n–í–æ–ø—Ä–æ—Å –ø–µ—Ä–≤—ã–π:')

# –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ñ–∞–π–ª—É —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ —É–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø–∏—Å—å —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
botbaze = sl.connect('botdata.db', check_same_thread=False)

# –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –ë–î
with botbaze:
    # –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü —Å –Ω—É–∂–Ω—ã–º –Ω–∞–º –∏–º–µ–Ω–µ–º
    data = botbaze.execute("select count(*) from sqlite_master where type='table' and name='stages'")
    for row in data:
        # –µ—Å–ª–∏ —Ç–∞–∫–∏—Ö —Ç–∞–±–ª–∏—Ü –Ω–µ—Ç
        if row[0] == 0:
            # —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ –∏ –¥–ª—è —É—á—ë—Ç–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
            # –¥–ª—è –±–æ–ª—å—à–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–µ—Ç—å—é —Ç–∞–±–ª–∏—Ü—É ‚Äî users, —Å–µ–π—á–∞—Å –æ–Ω–∞ –∫–∞–∫ —á–∞—Å—Ç—å stages
            with botbaze:
                botbaze.execute("""
                    CREATE TABLE stages (
                        id VARCHAR(200) PRIMARY KEY,
                        stage INTEGER,
                        answers INTEGER DEFAULT 0,
                        first INTEGER DEFAULT 0
                    );
                """)

    data = botbaze.execute("select count(*) from sqlite_master where type='table' and name='feedback'")
    for row in data:
        if row[0] == 0:
            with botbaze:
                botbaze.execute("""
                    CREATE TABLE feedback (
                        date VARCHAR(20),
                        id VARCHAR(100),
                        name VARCHAR(200),
                        text VARCHAR(4000)
                    );
                """)
#—Å–µ—Ç—Ç–µ—Ä—ã –∏ –≥–µ—Ç—Ç–µ—Ä—ã
def get_stage(chat_id):
    with botbaze:
        try:
            cursor = botbaze.cursor()
            cursor.execute('SELECT stage FROM stages WHERE id = ?', (str(chat_id),))
            stages = cursor.fetchone()
            stage = int(stages[0])
            return stage
        except Exception as exx:
            print('‚ùå –°—Ä–∞–±–æ—Ç–∞–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ get_stage: ', exx)
            return Stages.S_START.value

def set_stage(chat_id, stage):
    with botbaze:
        try:
            cursor = botbaze.cursor()
            cursor.execute('UPDATE stages SET stage = ? WHERE id = ?', (int(stage), str(chat_id)))
            return
        except Exception as exx:
            print('‚ùå –°—Ä–∞–±–æ—Ç–∞–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ set_stage: ', exx)
            return

def get_ans(chat_id):
    with botbaze:
        try:
            cursor = botbaze.cursor()
            cursor.execute('SELECT answers FROM stages WHERE id = ?', (str(chat_id),))
            answers = cursor.fetchone()
            ans = int(answers[0])
            return ans
        except Exception as exx:
            print('‚ùå –°—Ä–∞–±–æ—Ç–∞–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ get_ans: ', exx)
            return Stages.S_START.value

def set_ans(chat_id, stage):
    with botbaze:
        try:
            cursor = botbaze.cursor()
            cursor.execute('UPDATE stages SET answers = ? WHERE id = ?', (int(stage), str(chat_id)))
            return
        except Exception as exx:
            print('‚ùå –°—Ä–∞–±–æ—Ç–∞–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ set_ans: ', exx)
            return

def set_fir(chat_id):
    with botbaze:
        try:
            cursor = botbaze.cursor()
            cursor.execute('UPDATE stages SET first = ? WHERE id = ?', (1, str(chat_id)))
            return
        except Exception as exx:
            print('‚ùå –°—Ä–∞–±–æ—Ç–∞–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ set_fir: ', exx)
            return

def get_fir(chat_id):
    with botbaze:
        try:
            cursor = botbaze.cursor()
            cursor.execute('SELECT first FROM stages WHERE id = ?', (str(chat_id),))
            answers = cursor.fetchone()
            ans = int(answers[0])
            return ans
        except Exception as exx:
            print('‚ùå –°—Ä–∞–±–æ—Ç–∞–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ get_fir: ', exx)
            return Stages.S_START.value

# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞
@bot.message_handler(commands=['who'])
def welcome(message):
    chat_id = message.chat.id
    if str(chat_id) == str(OWNERID):
        bot.send_message(chat_id, "–í—ã –∞–¥–º–∏–Ω ‚ô•", parse_mode='Markdown')
    else:
        bot.send_message(chat_id, "–í—ã –Ω–µ –∞–¥–º–∏–Ω! [–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É üç™](https://t.me/ogne3)", parse_mode='Markdown')
@bot.message_handler(commands=['dayrep'])
def fb(message):
    chat_id = message.chat.id
    if str(chat_id) == str(OWNERID):
        # –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
        botbaze = sl.connect('botdata.db')
        # –ø–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
        now = datetime.now(timezone.utc)
        date = now.date()
        # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –±—É–¥—É—â–∏—Ö –æ—Ç—á—ë—Ç–æ–≤
        s = ''
        # —Ä–∞–±–æ—Ç–∞–µ–º —Å –±–∞–∑–æ–π
        with botbaze:
            # –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ
            data = botbaze.execute('SELECT * FROM feedback WHERE date = :Date;', {'Date': str(date)})
            # –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for row in data:
                # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –æ–±—â–µ–º –æ—Ç—á—ë—Ç–µ
                s = s + '*' + row[2] + '*' + ': ' + row[3] + '\n\n'
        # –µ—Å–ª–∏ –æ—Ç—á—ë—Ç–æ–≤ –Ω–µ –±—ã–ª–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        if s == '':
            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            s = '–°–µ–≥–æ–¥–Ω—è –º—ã –±–µ–∑ —Ñ–∏–¥–±–µ–∫–∞!'
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–∏–π –æ—Ç—á—ë—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
        bot.send_message(message.from_user.id, s, parse_mode='Markdown')
    else:
        bot.send_message(chat_id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞, —É–≤—ã.", parse_mode='Markdown')
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    with botbaze:
        try:
            cursor = botbaze.cursor()
            cursor.execute('SELECT id FROM stages WHERE id = ?', (str(chat_id),))
            results = cursor.fetchone()
            print(results)
            if str(results) == 'None':
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute('INSERT INTO stages (id, stage) VALUES (?, ?)',
                               (str(chat_id), 0))
            else:
                set_stage(chat_id, 0)
            cursor.execute('SELECT * FROM stages')
            results=cursor.fetchall()
            print(results)
        except Exception as exx:
            print('‚ùå –°—Ä–∞–±–æ—Ç–∞–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤–Ω–µ—Å–µ–Ω–∏—è —é–∑–µ—Ä–∞ –≤ –ë–î: ', exx)

    btn_fb = telebot.types.KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ!")
    btn_pl = telebot.types.KeyboardButton(text="–°—ã–≥—Ä–∞—Ç—å!")
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(btn_fb, btn_pl)
    bot.send_message(chat_id, start_txt, parse_mode='Markdown', reply_markup=keyboard)
    print(get_stage(message.chat.id))

@bot.message_handler(func=lambda message: get_stage(message.chat.id) == Stages.S_START.value, content_types=['text'])
def option(message):
    keyboard = telebot.types.ReplyKeyboardRemove()
    if message.text=="–û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ!":
        set_stage(message.chat.id, -1)
        bot.send_message(message.chat.id,'–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç–µ. –û—Ç 8 –¥–æ 4000 –∑–Ω–∞–∫–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.', reply_markup=keyboard)
    elif message.text=="–°—ã–≥—Ä–∞—Ç—å!":
        print(get_stage(message.chat.id))
        bot.send_message(message.chat.id, rules_txt, parse_mode='Markdown', reply_markup=keyboard)
        time.sleep(1)
        quess(message, get_stage(message.chat.id))
        print(get_stage(message.chat.id), get_fir(message.chat.id), get_ans(message.chat.id))
    elif message.text == "/who":
        welcome(message)
    elif message.text == "/dayrep":
        fb(message)
    else:
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.')

def question(message, q, a1, a2, a3, key):
    chat_id = message.chat.id
    keyboard = telebot.types.InlineKeyboardMarkup()
    btn1 = telebot.types.InlineKeyboardButton(text=a1, callback_data='1')
    btn2 = telebot.types.InlineKeyboardButton(text=a2, callback_data='2')
    btn3 = telebot.types.InlineKeyboardButton(text=a3, callback_data='3')
    keyboard.add(btn1, btn2, btn3)
    bot.send_message(chat_id, q, parse_mode="Markdown", reply_markup=keyboard)

def answ(call):
    mess = call.message
    chid = mess.chat.id
    messid = mess.message_id
    an = get_ans(chid)
    print(KEYS[get_stage(chid)], '|', call.data)
    if str(KEYS[get_stage(chid)]) == call.data:
        set_ans(chid, an + 1)
    bot.edit_message_text(chat_id=chid, message_id=messid,
                          text=str(str(get_stage(chid)+ 1) + '. –û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç.'))
    set_stage(chid, get_stage(chid) + 1)
    time.sleep(1)
    if get_stage(chid) <= 3:
        quess(mess, get_stage(chid))

def quess(message, a):
    if a == 0:
        question(message, "–°–∫–æ–ª—å–∫–æ –ª–∏—Ç—Ä–æ–≤ –º–æ–ª–æ–∫–∞ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –æ–¥–∏–Ω –∫–∏–ª–æ–≥—Ä–∞–º–º —Å—ã—Ä–∞? [ü•õ](https://www.timeoutabudhabi.com/cloud/timeoutabudhabi/2021/11/04/cheese-and-grape-nights-in-Abu-Dhabi-2021-1024x768.jpg)", "100", '10', '1', 1)
    elif a == 1:
        question(message,
                 "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —ç—Ç–∞ –ø–æ—Ä–æ–¥–∞ –∫–æ—Ä–æ–≤? [üêÆ](https://i.ytimg.com/vi/fTBF-S_22_8/maxresdefault.jpg)",
                 "–î–∂–µ—Ä—Å–∏", '–•–∞–π–ª–µ–Ω–¥', '–ö–æ—Å—Ç—Ä–æ–º—Å–∫–∞—è', 3)
    elif a == 2:
        question(message, "–í –∫–∞–∫–æ–º –≤–µ–∫–µ —Å—ã—Ä –ø–æ—è–≤–∏–ª—Å—è –≤ –†–æ—Å—Å–∏–∏? [üßÄ](https://live.staticflickr.com/3894/32976515421_c3596105ab_b.jpg)", "10 –≤.",
                 '15 –≤.', '18 –≤.', 2)
    elif a == 3:
        print('–Æ–∑–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª –∏–≥—Ä—É.')
        gift(message)

def gift(message):
    chid=message.chat.id
    gift_txt = str('–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ' + str(get_ans(chid)))
    if get_fir(chid) == 0:
        gift_txt += str(', –ø–æ—ç—Ç–æ–º—É –¥–∞—Ä–∏–º –≤–∞–º –ø—Ä–æ–º–æ–∫–æ–¥: '+ CODES[get_ans(chid)] +'. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –Ω–∞ —Å–∞–π—Ç–µ salkovo.ru.')
    else:
        gift_txt += str('. –í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –∏–≥—Ä—É –∏ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω–µ–µ.')
    set_fir(chid)
    set_ans(chid, 0)
    set_stage(chid, 0)
    bot.send_message(message.chat.id, gift_txt, parse_mode='Markdown')
    bot.send_message(message.chat.id, '–î–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∫ –Ω–∞—á–∞–ª—É –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç –∫–æ–º–∞–Ω–¥—É /start.', parse_mode='Markdown')


@bot.callback_query_handler(func=lambda call: call.data == '1')
def go(call):
    answ(call)
@bot.callback_query_handler(func=lambda call: call.data == '2')
def go(call):
    answ(call)
@bot.callback_query_handler(func=lambda call: call.data == '3')
def go(call):
    answ(call)

def func(message):
    sql = 'INSERT INTO feedback (date, id, name, text) values(?, ?, ?, ?)'
    now = datetime.now(timezone.utc)
    date = now.date()
    data = [
        (str(date), str(message.from_user.id), str(message.from_user.username), str(message.text[:4000]))
    ]
    # –¥–æ–±–∞–≤–ª—è–µ–º —Å –ø–æ–º–æ—â—å—é –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã–µ
    with botbaze:
        try:
            botbaze.executemany(sql, data)
            set_stage(message.chat.id, 0)
            bot.send_message(message.from_user.id, '–ü—Ä–∏–Ω—è—Ç–æ, —Å–ø–∞—Å–∏–±–æ!', parse_mode='Markdown')
            bot.send_message(message.chat.id, '–î–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∫ –Ω–∞—á–∞–ª—É –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç –∫–æ–º–∞–Ω–¥—É /start.',
                             parse_mode='Markdown')
        except Exception as eins:
            print('‚ùå –°—Ä–∞–±–æ—Ç–∞–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤–Ω–µ—Å–µ–Ω–∏—è –≤ –ë–î: ', eins)
            bot.send_message(message.from_user.id, '–ù–µ–ø–æ–ª–∞–¥–∫–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –ø–æ–≤—Ç–æ—Ä–Ω–æ!', parse_mode='Markdown')
   # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ—Ç—á—ë—Ç –ø—Ä–∏–Ω—è—Ç
@bot.message_handler(content_types=NOSUPTYPES)
def give_photo(message):
    bot.send_message(message.chat.id, text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é, —É–≤—ã! –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.")
@bot.message_handler(func=lambda message: get_stage(message.chat.id) == Stages.S_FB.value, content_types=['text'])
def insert(message):
    if len(message.text)>=8 and len(message.text)<=4000:
        func(message)
    else:
        bot.send_message(message.from_user.id, '–ü—Ä–∏—Å–º–æ—Ç—Ä–∏—Ç–µ—Å—å –∫ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –≤—ã—à–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', parse_mode='Markdown')

# –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True, interval=0)
        except Exception as emain:
            print('‚ùå –°—Ä–∞–±–æ—Ç–∞–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ polling: ', emain)